stages:
  - test

variables:
  # 通用配置
  MAVEN_CLI_OPTS: "--batch-mode --no-transfer-progress"
  DS_EXCLUDED_PATHS: "**/target/**" # 排除Maven构建目录

include:
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  # 如果使用社区版GitLab，可能需要手动添加模板路径
  # - project: 'gitlab-org/gitlab-foss'
  #   file: '/lib/gitlab/ci/templates/Jobs/Dependency-Scanning.git

# 覆盖默认的依赖扫描作业
dependency_scanning:
  tags:
    - safe # 必须与runner注册时的标签一致
  stage: test

  variables:
    # Java/Maven 配置
    DS_JAVA_VERSION: "8"
    # 缓存本项目 Maven 仓库加速构建，每个项目独立仓库，确保安全性与隔离性
    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"

    # JavaScript 配置（如果项目中有package.json）
    DS_JAVASCRIPT_ENABLED: "true"
    DS_JAVASCRIPT_PACKAGE_MANAGER: "npm" # 或 "yarn"
  before_script:
    - export NODE_VERSION=$(cat .nvmrc || echo "16") # 动态获取Node版本（如有.nvmrc）
    - nvm install $NODE_VERSION || echo "Node版本管理未启用"
  script:
    - echo "Running dependency scanning for Java/JS..."
    - mvn org.owasp:dependency-check-maven:check
    # 如果报告未生成，创建空报告避免报错
    - if [ ! -f "target/dependency-check-report.json" ]; then
      echo '{"version":"1.0","vulnerabilities":[]}' > target/dependency-check-report.json;
      fi
  artifacts:
    reports:
      dependency_scanning: dependency-scanning-report.json
    paths:
      - "**/dependency-check-report.*" # OWASP报告
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  cache:
    paths:
      - .m2/repository/
      - node_modules/
